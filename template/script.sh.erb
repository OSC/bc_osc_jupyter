#!/usr/bin/env bash

<%-
  cuda = context.node_type == "gpu"
  wrapper = session.staged_root.join("launch_wrapper.sh")
  wrapper_log = session.staged_root.join("launch_wrapper.log")

  kernels = {
    python36conda: {
      display_name: "Python 3.6 (Conda 5.2) [python/3.6-conda5.2#{" cuda/9.2.88" if cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel_launcher",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "python/3.6-conda5.2#{" cuda/9.2.88" if cuda}"
      }
    },
    python27conda: {
      display_name: "Python 2.7 (Conda 5.2) [python/2.7-conda5.2#{" cuda/9.2.88" if cuda}]",
      language: "python",
      argv: [
        wrapper,
        "python",
        "-m",
        "ipykernel",
        "-f",
        "{connection_file}"
      ],
      env: {
        MODULES: "python/2.7-conda5.2#{" cuda/9.2.88" if cuda}"
      }
    },
  }
-%>

echo "Starting main script..."
echo "TTT - $(date)"

#
# Start Jupyter Notebook server
#

# Clean the environment
module purge

# Create launcher wrapper
echo "Creating launcher wrapper script..."
(
umask 077
sed 's/^ \{2\}//' > "<%= wrapper %>" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  exec &>>"<%= wrapper_log %>"

  # Load the required environment
  module purge
  module load \${MODULES}
  module list

  # Launch the original command
  set -x
  exec "\${@}"
EOL
)
chmod 700 "<%= wrapper %>"
echo "TTT - $(date)"

# Create custom Jupyter kernels
echo "Creating custom Jupyter kernels..."
export JUPYTER_PATH="${PWD}/share/jupyter"
<%- kernels.each do |name, kernel| -%>
<%- path = "${JUPYTER_PATH}/kernels/sys_#{name}" -%>
mkdir -p "<%= path %>"
cp "${PWD}/assets/<%= name.to_s.gsub(/\d/, "") %>"/* "<%= path %>/."
(
umask 077
cat > "<%= path %>/kernel.json" << EOL
<%= JSON.pretty_generate kernel %>
EOL
)
<%- end -%>
echo "TTT - $(date)"

# Create user-created Conda env Jupyter kernels
echo "Creating custom Jupyter kernels from user-created Conda environments..."
for dir in "${HOME}/.conda/envs"/*/ "${HOME}/envs"/*/ ; do
  (
  umask 077
  set -e
  KERNEL_NAME="$(basename "${dir}")"
  KERNEL_PATH="~${dir#${HOME}}"
  [[ -x "${dir}bin/activate" ]] || exit 0
  echo "Creating kernel for ${dir}..."
  source "${dir}bin/activate" "${dir}"
  set -x
  if [[ "$(conda list -f --json ipykernel)" == "[]" ]]; then
    CONDA_PKGS_DIRS="$(mktemp -d)" conda install --yes --quiet --no-update-deps ipykernel
  fi
  python \
    -m ipykernel \
      install \
      --name "conda_${KERNEL_NAME}" \
      --display-name "${KERNEL_NAME} [${KERNEL_PATH}]" \
      --prefix "${PWD}"
  ) &
done
wait
echo "TTT - $(date)"

# Set working directory to notebook root directory
cd "${NOTEBOOK_ROOT}"

# Setup Jupyter Notebook environment
module use /apps/lmodfiles/project/ondemand
module load jupyter/python3.6
module list
echo "TTT - $(date)"

# List available kernels for debugging purposes
set -x
jupyter kernelspec list
{ set +x; } 2>/dev/null
echo "TTT - $(date)"

# Launch the Jupyter Notebook server
set -x
jupyter notebook --config="${CONFIG_FILE}"
